pipeline {
    agent {
        label 'docker_server'
    }
    environment {
        GIT_CODE_URL = "https://github.com/zivmitrani/python_flask.git"
        DOCKERHUB_REPO = "zivmit"
        DOCKER_IMAGE_NAME = "py-docker-images"
        IMAGE_VERSION = "latest"
        BUILD_NAME = "py_flask"
    }
    parameters {
        choice(name: 'branch', choices: ['master', 'develop'], description: 'Source Branch')
     }
    stages {
        stage('Git Clone') {
            steps {
                script {
                    scmInfo = checkout([$class: 'GitSCM', branches: [[name: "*/${params.branch}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github_ziv', url: "${env.GIT_CODE_URL}"]]])
                    env.GIT_CODE_BRANCH = scmInfo.GIT_BRANCH
                    env.GIT_CODE_COMMIT = scmInfo.GIT_COMMIT
                    sh 'printenv'
                }
            }
        }
        stage('Build Preperations'){
            steps {
                script {
                    currentBuild.displayName = "${env.BUILD_NAME}-#${env.BUILD_NUMBER}-(${params.branch})"
                    sh 'printenv'
                }
            }
        }
        stage("Build") {
            steps {
                sh (
                    script: "cd ./services/app/",
                    label: "Docker: cd dockerfile folder "
                )
                sh (
                    script: "docker build -t ${env.DOCKERHUB_REPO}/${env.DOCKER_IMAGE_NAME}:${env.IMAGE_VERSION} -f ./services/app/Dockerfile . ",
                    label: "Docker: build python_flask image "
                )
            }
        }
        stage("Publish to DockerHub"){
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "dockerhub_ziv", usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASSWORD']]) {
                sh (
                    script: "docker login --username=${DOCKERHUB_USER} --password=${DOCKERHUB_PASSWORD}",
                    label: "Docker: Login  "
                )
                sh (
                    script: "docker push ${env.DOCKERHUB_REPO}/${env.DOCKER_IMAGE_NAME}:${env.IMAGE_VERSION}",
                    label: "Docker: push "
                )
                }
            }
        }


        stage("Deployment"){
            steps {
            withCredentials([[$class: 'sshUserPrivateKey', credentialsId: "deployment_env", usernameVariable: 'SSH_USER', keyFileVariable: 'SSH_KEY']]) {
            sh '''
            docker-compose -H "ssh://ubuntu@172.31.89.110" pull
            docker-compose -H "ssh://ubuntu@172.31.89.110" down -v
            docker-compose -H "ssh://ubuntu@172.31.89.110" up -d

            '''
                }
            }
        }

        stage('cleanup'){
            steps {
    		    cleanWs ()
            }
        }
    }
}